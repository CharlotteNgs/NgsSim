?strtime
??strtime
?strftime
install.packages("VLMC")
library(VLMC)
?VLMC
??VLMC
?vlmc
data(bnrf1)
head(bnrf1EB)
vc5 <- vlmc(bnrf1EB, cutoff = 5)
vc5
draw(vc5, cumul = FALSE)
install.packages("Rcpp")
install.packages("inline")
require(Rcpp)
evalCpp( "1+1")
source("http://bioconductor.org/biocLite.R")
biocLite("Rsamtools")
system.date
system.date()
sys.date()
sys.time()
date()
library(BSgenome)
library(BSgenome.Btaurus.UCSC.bosTau6)
### # assign genome object
bosTau6 <- BSgenome.Btaurus.UCSC.bosTau6
seqnames(bosTau6)
seqlengths(bosTau6)
bosTau6.chr25.seq <- as.character(bosTau6[["chr25"]])
library(VLMC)
date()
bt.chr25.vc5 <- vlmc(bosTau6.chr25.seq, cutoff = 5)
date()
bt.chr25.vc5
install.packages("Rcpp")
install.packages("inline")
demo()
demo("graphics")
dev.off()
install.packages("VLMC")
?vlmc
library(VLMC)
?vlmc
source("http://bioconductor.org/biocLite.R")
biocLite()
?install.package
?install.packages
biocLite("BSgenome")
biocLite("BSgenome.Btaurus.UCSC.bosTau6")
library(BSgenome)
available.genomes()
library(BSgenome.Btaurus.UCSC.bosTau6)
bosTau6 <- BSgenome.Btaurus.UCSC.bosTau6
seqnames(bosTau6)
bosTau6[["chr25"]]
bosTau6[["chr25"]][1:50]
methods(bosTau6[["chr25"]])
class(bosTau6[["chr25"]])
?Biostrings
?Biostring
?MaskedDNAString
library()
?readLines
library(BSgenome)
available.genomes()
grep('Scerevisiae', available.genomes())
aval.gen <- available.genomes()
aval.gen[grep('Scerevisiae', available.genomes())]
library(BSgenome.Scerevisiae.UCSC.sacCer3)
Scerevisiae
Scerevisiae[[1:100]]
Scerevisiae$chrI[1:10]
Scerevisiae$chrI[1:100]
write.XStringSet(Scerevisiae$chrI[1:100], file=yeast100.fa, format="fasta", width=20)
??write.XStringSet
library(Biostrings)
?write.XStringSet
??write.XStringSet
?XStringSet
install.packages("C:/Users/pvr/Downloads/hsphase.zip", repos = NULL)
library(hsphase)
install.packages("snowfall")
library(hsphase)
install.packages("Rcpp")
library(hsphase)
install.packages("RcppArmadillo")
library(hsphase)
?vignette
browseVignette("hsphase")
browseVignettes("hsphase")
install.packages("C:/Users/pvr/Downloads/hsphase.zip", repos = NULL)
install.packages("C:/Users/pvr/Downloads/hsphase.zip", repos = NULL)
library(hsphase)
browseVignettes("hsphase")
genotype <- matrix(c(
0,0,0,0,1,2,2,2,0,0,2,0,0,0,
2,2,2,2,1,0,0,0,2,2,2,2,2,2,
2,2,2,2,1,2,2,2,0,0,2,2,2,2,
2,2,2,2,0,0,0,0,2,2,2,2,2,2,
0,0,0,0,0,2,2,2,2,2,2,0,0,0
), ncol=14, byrow=T)
AnimalID <- paste("ID-", 1:5, sep="")
SNPID <- paste("SNP-", letters[1:14], sep="")
rownames(genotype) <- AnimalID
colnames(genotype) <- SNPID
genotype[1:5, 1:5]
bmh(genotype)
ls()
ls()
.libPaths()
source("http://bioconductor.org/biocLite.R")
?biocLite
monograph_group()
library(BSgenome)
available.genomes()
library(BSgenome.Scerevisiae.UCSC.sacCer3)
?write.XStringSet
??write.XStringSet
??write.DNAStringSet
?read.DNAStringSet
?DNAString
?read.DNAStringSet
?XStringSet
x0 <- c("#CTC-NACCAGTAT", "#TTGA", "TACCTAGAG")
width(x0)
x1 <- BStringSet(x0)
x1
dna0 <- DNAStringSet(x0, start=4, end=-3)
dna0
names(dna0)
names(dna0)[2] <- "seqB"
dna0
dna0
?read.DNAStringSet
biocLite("GeneR")
library(ShortRead)
biocLite("ShortRead")
library(ShortRead)
?readFasta
x1
getwd()
writeFasta(x1, file = "x1.fa")
showMethods("writeFasta")
f1 <- system.file("extdata", "someORF.fa", package="Biostrings")
f1
rfa <- readFasta(f1)
rfa
sread(rfa)
ls()
library
library()
Scerevisiae
yestChr1 <- Scerevisiae$chr1
yestChr1 <- Scerevisiae$chrI
yeastChr1 <- Scerevisiae$chrI
yeastChr1
class(yeastChr1)
write.fasta(yeastChr1, file = "yeastChr1.fa")
writeFasta(yeastChr1, file = "yeastChr1.fa")
setwd("C:/temp/Bugs/b001009/RevertBesamerIdUpdate/input")
list.files()
?read.csv
vUpdateList <- read.csv2(file = "20140515075510_UpdateBesamerIds2077_1.csv", header = FALSE,
as.is = TRUE, skip = 5, fill = TRUE)
dim(vUpdateList)
head(vUpdateList)
tail(vUpdateList)
sum(na.omit(vUpdateList[,5]))
(dim(vUpdateList)[1]-1)/2 - sum(na.omit(vUpdateList[,5]))
if ((dim(vUpdateList)[1]-1)/2 - sum(na.omit(vUpdateList[,5])) != 0)
cat("WARNING: Update did not work correctly")
vUpdateList[is.na(vUpdateList[,5])]
vUpdateList[is.na(vUpdateList[,5]),]
vUpdateList[!is.na(vUpdateList[,5]),]
?write.csv
?write.csv2
sOutFile <- "RevertBesamerIds2077_1.csv"
write.csv2(vUpdateList[!is.na(vUpdateList[,5]),], file = sOutFile)
write.csv2(vUpdateList[!is.na(vUpdateList[,5]),], file = sOutFile, row.names = FALSE)
list.files()
list.files()
lInFiles <- list.files()
lInFiles
?seq_len
lInFiles <- list.files()
nLenInFiles <- length(lInFiles)
### # stem of file names
sInFileStem <- "20140515075510_UpdateBesamerIds2077"
sOutFileStem <- "RevertBesamerIds2077"
for (nInFIdx in 1:seq_len(nLenInFiles)) {
sInFile <- paste(sInFileStem, "_", nInFIdx, ".csv", sep = "")
cat("Input file: ", sInFile, "\n")
}
nLenInFiles
1:seq_len(nLenInFiles)
for (nInFIdx in seq_len(nLenInFiles)) {
sInFile <- paste(sInFileStem, "_", nInFIdx, ".csv", sep = "")
cat("Input file: ", sInFile, "\n")
}
lInFiles <- list.files()
nLenInFiles <- length(lInFiles)
### # stem of file names
sInFileStem <- "20140515075510_UpdateBesamerIds2077"
sOutFileStem <- "RevertBesamerIds2077"
### # loop over all input files
for (nInFIdx in seq_len(nLenInFiles)) {
sInFile <- paste(sInFileStem, "_", nInFIdx, ".csv", sep = "")
cat("Input file: ", sInFile, "\n")
sOutFile <- paste(sOutFileStem, "_", nInFIdx, ".csv", sep = "")
cat("Output file: ", sOutFile, "\n")
}
###
###
###
###   Purpose:   Get unique list of Ins Ids to be reverted
###   started:   2014/05/19 (pvr)
###
### ####################################################### ###
### # set working directory to input dir
setwd("C:/temp/Bugs/b001009/RevertBesamerIdUpdate/input")
### # list of input files
lInFiles <- list.files()
nLenInFiles <- length(lInFiles)
### # stem of file names
sInFileStem <- "20140515075510_UpdateBesamerIds2077"
sOutFileStem <- "RevertBesamerIds2077"
### # loop over all input files
for (nInFIdx in seq_len(nLenInFiles)) {
cat("Process cycle: ", nInFIdx, "\n")
sInFile <- paste(sInFileStem, "_", nInFIdx, ".csv", sep = "")
#cat("Input file: ", sInFile, "\n")
sOutFile <- paste(sOutFileStem, "_", nInFIdx, ".csv", sep = "")
#cat("Output file: ", sOutFile, "\n")
### # input
vUpdateList <- read.csv2(file = sInFile, header = FALSE,
as.is = TRUE, skip = 5, fill = TRUE)
### # check whether updates worked
if ((dim(vUpdateList)[1]-1)/2 - sum(na.omit(vUpdateList[,5])) != 0)
cat("WARNING: Update did not work correctly")
### # output all rows with updated record
write.csv2(vUpdateList[!is.na(vUpdateList[,5]),], file = sOutFile)
}
library(BSgenome)
available.genomes()
vAvGen <- available.genomes()
vAvGen
grep(vAvGen,"Scerevisiae")
grep("Scerevisiae",vAvGen)
vAvGen[grep("Scerevisiae",vAvGen)]
vAvGen[grep("BSgenome.Scerevisiae",vAvGen)]
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
print(vAvGen[grep(sYestGenomeSearchName, vAvGen)])
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
library(sYeastGen)
?libary
?library
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
library(package=sYeastGen)
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
library(package=sYeastGen, character.only = TRUE)
Scerevisiae
length(Scerevisiae)
for (i in seq_len(Scerevisiae)) cat("i = ", i, "\n")
for (i in 1:seq_len(Scerevisiae)) cat("i = ", i, "\n")
for (i in 1:length(Scerevisiae)) cat("i = ", i, "\n")
?BSgenome
?BioString
?BioStrings
?BString
?write.XStringSet
library(Biostrings)
?write.XStringSet
??write.XStringSet
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
library(Biostrings)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
library(package=sYeastGen, character.only = TRUE)
### # use short reads
dnaStringSet <- DNAStringSet(Scerevisiae[[1]])
write.XStringSet(dnaStringSet, file="myseq2.txt", format="fasta", width=80)
write.XStringSet(dnaStringSet, file="myseq2.txt", format="fasta", width=80)
library(ShortRead)
write.XStringSet(dnaStringSet, file="myseq2.txt", format="fasta", width=80)
?write.fasta
?ShortRead
writeFasta(dnaStringSet, file="myseq2.txt", format="fasta", width=80)
writeFasta(dnaStringSet, file="myseq2.txt")
list.files()
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
library(Biostrings)
library(ShortRead)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
library(package=sYeastGen, character.only = TRUE)
### # use short reads
dnaStringSet <- DNAStringSet(Scerevisiae[[1]])
writeFasta(dnaStringSet, file="refGenYeast.fasta")
setwd("C:/Daten/GitHub/NgsSim/data/yeast/refgen")
###
###
###
###   Purpose:   Protocol and script to produce reference genome into one FASTA file
###   started:   2014/05/21 (pvr)
###
### ################################################################################## ###
setwd("C:/Daten/GitHub/NgsSim/data/yeast/refgen")
### # load Bsgenome to work with genomes in BioC
library(BSgenome)
library(Biostrings)
library(ShortRead)
### # check which yeast genomes are available
sYestGenomeSearchName  <- "BSgenome.Scerevisiae"
vAvGen <- available.genomes()
vYeastGen <- vAvGen[grep(sYestGenomeSearchName, vAvGen)]
cat(" *** Available yeast genomes: \n")
print(vYeastGen)
#[1] "BSgenome.Scerevisiae.UCSC.sacCer1" "BSgenome.Scerevisiae.UCSC.sacCer2"
#[3] "BSgenome.Scerevisiae.UCSC.sacCer3"
### # choose the last one and load it
sYeastGen <- vYeastGen[3]
cat(" *** Chosen yeast genomes: \n")
print(sYeastGen)
library(package=sYeastGen, character.only = TRUE)
### # use short reads
dnaStringSet <- DNAStringSet(Scerevisiae[[1]])
writeFasta(dnaStringSet, file="refGenYeast.fasta")
?writeFasta
